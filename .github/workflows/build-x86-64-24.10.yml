name: build-x86-64-immortalwrt-24.10

on:
  workflow_dispatch:
    inputs:
      profile:
        description: '请输入要编译的固件配置（多个配置用逗号分隔，如 1024,2048）'
        required: true
        default: '1024'
      include_docker:
        description: '是否编译 Docker 插件'
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false

jobs:
  validate-inputs:
    runs-on: ubuntu-22.04
    outputs:
      profiles: ${{ steps.split-profiles.outputs.profiles }}
    steps:
      - name: Split profiles into JSON array
        id: split-profiles
        run: |
          profiles="${{ github.event.inputs.profile }}"
          IFS=',' read -ra profile_array <<< "$profiles"
          json_profiles=$(jq -nc '$ARGS.positional' --args "${profile_array[@]}")
          echo "profiles=$json_profiles" >> $GITHUB_OUTPUT

  build:
    needs: validate-inputs
    runs-on: ubuntu-22.04
    timeout-minutes: 360  # 延长超时时间
    strategy:
      matrix:
        profile: ${{ fromJSON(needs.validate-inputs.outputs.profiles) }}
      max-parallel: 2  # 限制并行任务数
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/x86-64/build.sh

      - name: Validate PPPoE Inputs
        run: |
          if [[ "${{ inputs.enable_pppoe }}" == "yes" ]]; then
            if [[ -z "${{ inputs.pppoe_account }}" || -z "${{ inputs.pppoe_password }}" ]]; then
              echo "Error: PPPoE 账号和密码必须填写！"
              exit 1
            fi
          fi

      - name: Build ImmortalWrt (Profile ${{ matrix.profile }}
        run: |
          set -ex  # 启用详细日志和严格错误处理
          echo "正在构建配置：${{ matrix.profile }} MB"
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}/bin-${{ matrix.profile }}:/home/build/immortalwrt/bin" \
            -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
            -v "${{ github.workspace }}/x86-64/imm.config:/home/build/immortalwrt/.config" \
            -v "${{ github.workspace }}/x86-64/24.10/build.sh:/home/build/immortalwrt/build.sh" \
            -e PROFILE=${{ matrix.profile }} \
            -e INCLUDE_DOCKER=${{ github.event.inputs.include_docker }} \
            -e ENABLE_PPPOE=${{ inputs.enable_pppoe }} \
            -e PPPOE_ACCOUNT=${{ inputs.pppoe_account }} \
            -e PPPOE_PASSWORD=${{ inputs.pppoe_password }} \
            immortalwrt/imagebuilder:x86-64-openwrt-24.10.0-rc3 /bin/bash /home/build/immortalwrt/build.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.profile }}
          path: bin-${{ matrix.profile }}/targets/x86/64/*.img.gz

  release:
    needs: [validate-inputs, build]
    if: success()  # 仅在构建成功时执行
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate SHA-256 and Prepare Release
        run: |
          mkdir -p release
          find artifacts -name "*.img.gz" -exec cp {} release \;
          cd release
          for file in *.img.gz; do
            sha256sum "$file" > "$file.sha256"
            sha256sum -c "$file.sha256"
          done
          echo "### ImmortalWrt 固件构建信息" > info.md
          echo "- 构建时间: $(date)" >> info.md
          [[ "${{ github.event.inputs.include_docker }}" == "yes" ]] && echo "- 包含 Docker 插件" >> info.md

      - name: Upload to Release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: Autobuild-x86-64
          body_path: release/info.md
          files: |
            release/*.img.gz
            release/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
